=begin
#Klaviyo API (Beta)

#The Klaviyo REST API. Please visit https://developers.klaviyo.com for more details.

The version of the OpenAPI document: 2022-09-07.pre
Contact: developers@klaviyo.com
Generated by: https://openapi-generator.tech
OpenAPI Generator version: 5.4.0

=end

require 'cgi'

module KlaviyoBeta
  class FlowsApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Get Flow
    # Get a flow by id<br><br>*Rate limits*:<br>Burst: `3/s`<br>Steady: `60/m`
    # @param id [String] 
    # @param [Hash] opts the optional parameters
    # @option opts [Array<String>] :fields_flow_action For more information please visit https://developers.klaviyo.com/en/v2022-09-07.pre/reference/api-overview#filtering
    # @option opts [Array<String>] :fields_flow For more information please visit https://developers.klaviyo.com/en/v2022-09-07.pre/reference/api-overview#filtering
    # @option opts [Array<String>] :include For more information please visit https://developers.klaviyo.com/en/v2022-09-07.pre/reference/api-overview#relationships
    # @return [Hash<String, Object>]
    def get_flow(id, opts = {})
      data, _status_code, _headers = get_flow_with_http_info(id, opts)
      data
    end

    # Get Flow
    # Get a flow by id&lt;br&gt;&lt;br&gt;*Rate limits*:&lt;br&gt;Burst: &#x60;3/s&#x60;&lt;br&gt;Steady: &#x60;60/m&#x60;
    # @param id [String] 
    # @param [Hash] opts the optional parameters
    # @option opts [Array<String>] :fields_flow_action For more information please visit https://developers.klaviyo.com/en/v2022-09-07.pre/reference/api-overview#filtering
    # @option opts [Array<String>] :fields_flow For more information please visit https://developers.klaviyo.com/en/v2022-09-07.pre/reference/api-overview#filtering
    # @option opts [Array<String>] :include For more information please visit https://developers.klaviyo.com/en/v2022-09-07.pre/reference/api-overview#relationships
    # @return [Array<(Hash<String, Object>, Integer, Hash)>] Hash<String, Object> data, response status code and response headers
    def get_flow_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: FlowsApi.get_flow ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling FlowsApi.get_flow"
      end
      allowable_values = ["action_type", "status", "created", "updated", "settings", "tracking_options", "send_options", "send_options.use_smart_sending", "send_options.is_transactional", "render_options", "render_options.shorten_links", "render_options.add_org_prefix", "render_options.add_info_link", "render_options.add_opt_out_language"]
      if @api_client.config.client_side_validation && opts[:'fields_flow_action'] && !opts[:'fields_flow_action'].all? { |item| allowable_values.include?(item) }
        fail ArgumentError, "invalid value for \"fields_flow_action\", must include one of #{allowable_values}"
      end
      allowable_values = ["name", "status", "archived", "created", "updated", "trigger_type"]
      if @api_client.config.client_side_validation && opts[:'fields_flow'] && !opts[:'fields_flow'].all? { |item| allowable_values.include?(item) }
        fail ArgumentError, "invalid value for \"fields_flow\", must include one of #{allowable_values}"
      end
      allowable_values = ["flow-actions"]
      if @api_client.config.client_side_validation && opts[:'include'] && !opts[:'include'].all? { |item| allowable_values.include?(item) }
        fail ArgumentError, "invalid value for \"include\", must include one of #{allowable_values}"
      end
      # resource path
      local_var_path = '/api/flows/{id}/'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'fields[flow-action]'] = @api_client.build_collection_param(opts[:'fields_flow_action'], :csv) if !opts[:'fields_flow_action'].nil?
      query_params[:'fields[flow]'] = @api_client.build_collection_param(opts[:'fields_flow'], :csv) if !opts[:'fields_flow'].nil?
      query_params[:'include'] = @api_client.build_collection_param(opts[:'include'], :csv) if !opts[:'include'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # klaviyo api revision
      header_params['revision'] =  ENV['API_REVISION'] || "2022-09-07.pre"
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Hash<String, Object>'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Klaviyo-API-Key']

      new_options = opts.merge(
        :operation => :"FlowsApi.get_flow",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: FlowsApi#get_flow\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get Flow Action
    # Get a flow action by id<br><br>*Rate limits*:<br>Burst: `3/s`<br>Steady: `60/m`
    # @param id [String] 
    # @param [Hash] opts the optional parameters
    # @option opts [Array<String>] :fields_flow_action For more information please visit https://developers.klaviyo.com/en/v2022-09-07.pre/reference/api-overview#filtering
    # @option opts [Array<String>] :fields_flow_message For more information please visit https://developers.klaviyo.com/en/v2022-09-07.pre/reference/api-overview#filtering
    # @option opts [Array<String>] :fields_flow For more information please visit https://developers.klaviyo.com/en/v2022-09-07.pre/reference/api-overview#filtering
    # @option opts [Array<String>] :include For more information please visit https://developers.klaviyo.com/en/v2022-09-07.pre/reference/api-overview#relationships
    # @return [Hash<String, Object>]
    def get_flow_action(id, opts = {})
      data, _status_code, _headers = get_flow_action_with_http_info(id, opts)
      data
    end

    # Get Flow Action
    # Get a flow action by id&lt;br&gt;&lt;br&gt;*Rate limits*:&lt;br&gt;Burst: &#x60;3/s&#x60;&lt;br&gt;Steady: &#x60;60/m&#x60;
    # @param id [String] 
    # @param [Hash] opts the optional parameters
    # @option opts [Array<String>] :fields_flow_action For more information please visit https://developers.klaviyo.com/en/v2022-09-07.pre/reference/api-overview#filtering
    # @option opts [Array<String>] :fields_flow_message For more information please visit https://developers.klaviyo.com/en/v2022-09-07.pre/reference/api-overview#filtering
    # @option opts [Array<String>] :fields_flow For more information please visit https://developers.klaviyo.com/en/v2022-09-07.pre/reference/api-overview#filtering
    # @option opts [Array<String>] :include For more information please visit https://developers.klaviyo.com/en/v2022-09-07.pre/reference/api-overview#relationships
    # @return [Array<(Hash<String, Object>, Integer, Hash)>] Hash<String, Object> data, response status code and response headers
    def get_flow_action_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: FlowsApi.get_flow_action ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling FlowsApi.get_flow_action"
      end
      allowable_values = ["action_type", "status", "created", "updated", "settings", "tracking_options", "send_options", "send_options.use_smart_sending", "send_options.is_transactional", "render_options", "render_options.shorten_links", "render_options.add_org_prefix", "render_options.add_info_link", "render_options.add_opt_out_language"]
      if @api_client.config.client_side_validation && opts[:'fields_flow_action'] && !opts[:'fields_flow_action'].all? { |item| allowable_values.include?(item) }
        fail ArgumentError, "invalid value for \"fields_flow_action\", must include one of #{allowable_values}"
      end
      allowable_values = ["name", "channel", "content", "created", "updated"]
      if @api_client.config.client_side_validation && opts[:'fields_flow_message'] && !opts[:'fields_flow_message'].all? { |item| allowable_values.include?(item) }
        fail ArgumentError, "invalid value for \"fields_flow_message\", must include one of #{allowable_values}"
      end
      allowable_values = ["name", "status", "archived", "created", "updated", "trigger_type"]
      if @api_client.config.client_side_validation && opts[:'fields_flow'] && !opts[:'fields_flow'].all? { |item| allowable_values.include?(item) }
        fail ArgumentError, "invalid value for \"fields_flow\", must include one of #{allowable_values}"
      end
      allowable_values = ["flow", "flow-messages"]
      if @api_client.config.client_side_validation && opts[:'include'] && !opts[:'include'].all? { |item| allowable_values.include?(item) }
        fail ArgumentError, "invalid value for \"include\", must include one of #{allowable_values}"
      end
      # resource path
      local_var_path = '/api/flow-actions/{id}/'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'fields[flow-action]'] = @api_client.build_collection_param(opts[:'fields_flow_action'], :csv) if !opts[:'fields_flow_action'].nil?
      query_params[:'fields[flow-message]'] = @api_client.build_collection_param(opts[:'fields_flow_message'], :csv) if !opts[:'fields_flow_message'].nil?
      query_params[:'fields[flow]'] = @api_client.build_collection_param(opts[:'fields_flow'], :csv) if !opts[:'fields_flow'].nil?
      query_params[:'include'] = @api_client.build_collection_param(opts[:'include'], :csv) if !opts[:'include'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # klaviyo api revision
      header_params['revision'] =  ENV['API_REVISION'] || "2022-09-07.pre"
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Hash<String, Object>'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Klaviyo-API-Key']

      new_options = opts.merge(
        :operation => :"FlowsApi.get_flow_action",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: FlowsApi#get_flow_action\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get Flow Action Flow
    # Get the flow for a flow action<br><br>*Rate limits*:<br>Burst: `3/s`<br>Steady: `60/m`
    # @param action_id [String] 
    # @param [Hash] opts the optional parameters
    # @option opts [Array<String>] :fields_flow For more information please visit https://developers.klaviyo.com/en/v2022-09-07.pre/reference/api-overview#filtering
    # @return [Hash<String, Object>]
    def get_flow_action_flow(action_id, opts = {})
      data, _status_code, _headers = get_flow_action_flow_with_http_info(action_id, opts)
      data
    end

    # Get Flow Action Flow
    # Get the flow for a flow action&lt;br&gt;&lt;br&gt;*Rate limits*:&lt;br&gt;Burst: &#x60;3/s&#x60;&lt;br&gt;Steady: &#x60;60/m&#x60;
    # @param action_id [String] 
    # @param [Hash] opts the optional parameters
    # @option opts [Array<String>] :fields_flow For more information please visit https://developers.klaviyo.com/en/v2022-09-07.pre/reference/api-overview#filtering
    # @return [Array<(Hash<String, Object>, Integer, Hash)>] Hash<String, Object> data, response status code and response headers
    def get_flow_action_flow_with_http_info(action_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: FlowsApi.get_flow_action_flow ...'
      end
      # verify the required parameter 'action_id' is set
      if @api_client.config.client_side_validation && action_id.nil?
        fail ArgumentError, "Missing the required parameter 'action_id' when calling FlowsApi.get_flow_action_flow"
      end
      allowable_values = ["name", "status", "archived", "created", "updated", "trigger_type"]
      if @api_client.config.client_side_validation && opts[:'fields_flow'] && !opts[:'fields_flow'].all? { |item| allowable_values.include?(item) }
        fail ArgumentError, "invalid value for \"fields_flow\", must include one of #{allowable_values}"
      end
      # resource path
      local_var_path = '/api/flow-actions/{action_id}/flow/'.sub('{' + 'action_id' + '}', CGI.escape(action_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'fields[flow]'] = @api_client.build_collection_param(opts[:'fields_flow'], :csv) if !opts[:'fields_flow'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # klaviyo api revision
      header_params['revision'] =  ENV['API_REVISION'] || "2022-09-07.pre"
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Hash<String, Object>'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Klaviyo-API-Key']

      new_options = opts.merge(
        :operation => :"FlowsApi.get_flow_action_flow",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: FlowsApi#get_flow_action_flow\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get Flow Action Messages
    # Gets a list of flow messages that belong to the given flow action. Sparse fieldsets can be utilized to request specific fields. The flow messages can be sorted by id, name, created, and updated in ascending and descending order. Each request will return a max of 50 flow messages, which can be paginated through offset pagination<br><br>*Rate limits*:<br>Burst: `3/s`<br>Steady: `60/m`
    # @param action_id [String] 
    # @param [Hash] opts the optional parameters
    # @option opts [Array<String>] :fields_flow_message For more information please visit https://developers.klaviyo.com/en/v2022-09-07.pre/reference/api-overview#filtering
    # @option opts [String] :filter For more information please visit https://developers.klaviyo.com/en/v2022-09-07.pre/reference/api-overview#filtering&lt;br&gt;Allowed field(s)/operator(s):&lt;br&gt;&#x60;id&#x60;: &#x60;any&#x60;&lt;br&gt;&#x60;name&#x60;: &#x60;contains&#x60;, &#x60;ends-with&#x60;, &#x60;equals&#x60;, &#x60;starts-with&#x60;&lt;br&gt;&#x60;created&#x60;: &#x60;equals&#x60;, &#x60;greater-or-equal&#x60;, &#x60;greater-than&#x60;, &#x60;less-or-equal&#x60;, &#x60;less-than&#x60;&lt;br&gt;&#x60;updated&#x60;: &#x60;equals&#x60;, &#x60;greater-or-equal&#x60;, &#x60;greater-than&#x60;, &#x60;less-or-equal&#x60;, &#x60;less-than&#x60;
    # @option opts [String] :sort For more information please visit https://developers.klaviyo.com/en/v2022-09-07.pre/reference/api-overview#sorting
    # @return [Hash<String, Object>]
    def get_flow_action_messages(action_id, opts = {})
      data, _status_code, _headers = get_flow_action_messages_with_http_info(action_id, opts)
      data
    end

    # Get Flow Action Messages
    # Gets a list of flow messages that belong to the given flow action. Sparse fieldsets can be utilized to request specific fields. The flow messages can be sorted by id, name, created, and updated in ascending and descending order. Each request will return a max of 50 flow messages, which can be paginated through offset pagination&lt;br&gt;&lt;br&gt;*Rate limits*:&lt;br&gt;Burst: &#x60;3/s&#x60;&lt;br&gt;Steady: &#x60;60/m&#x60;
    # @param action_id [String] 
    # @param [Hash] opts the optional parameters
    # @option opts [Array<String>] :fields_flow_message For more information please visit https://developers.klaviyo.com/en/v2022-09-07.pre/reference/api-overview#filtering
    # @option opts [String] :filter For more information please visit https://developers.klaviyo.com/en/v2022-09-07.pre/reference/api-overview#filtering&lt;br&gt;Allowed field(s)/operator(s):&lt;br&gt;&#x60;id&#x60;: &#x60;any&#x60;&lt;br&gt;&#x60;name&#x60;: &#x60;contains&#x60;, &#x60;ends-with&#x60;, &#x60;equals&#x60;, &#x60;starts-with&#x60;&lt;br&gt;&#x60;created&#x60;: &#x60;equals&#x60;, &#x60;greater-or-equal&#x60;, &#x60;greater-than&#x60;, &#x60;less-or-equal&#x60;, &#x60;less-than&#x60;&lt;br&gt;&#x60;updated&#x60;: &#x60;equals&#x60;, &#x60;greater-or-equal&#x60;, &#x60;greater-than&#x60;, &#x60;less-or-equal&#x60;, &#x60;less-than&#x60;
    # @option opts [String] :sort For more information please visit https://developers.klaviyo.com/en/v2022-09-07.pre/reference/api-overview#sorting
    # @return [Array<(Hash<String, Object>, Integer, Hash)>] Hash<String, Object> data, response status code and response headers
    def get_flow_action_messages_with_http_info(action_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: FlowsApi.get_flow_action_messages ...'
      end
      # verify the required parameter 'action_id' is set
      if @api_client.config.client_side_validation && action_id.nil?
        fail ArgumentError, "Missing the required parameter 'action_id' when calling FlowsApi.get_flow_action_messages"
      end
      allowable_values = ["name", "channel", "content", "created", "updated"]
      if @api_client.config.client_side_validation && opts[:'fields_flow_message'] && !opts[:'fields_flow_message'].all? { |item| allowable_values.include?(item) }
        fail ArgumentError, "invalid value for \"fields_flow_message\", must include one of #{allowable_values}"
      end
      allowable_values = ["created", "-created", "id", "-id", "name", "-name", "updated", "-updated"]
      if @api_client.config.client_side_validation && opts[:'sort'] && !allowable_values.include?(opts[:'sort'])
        fail ArgumentError, "invalid value for \"sort\", must be one of #{allowable_values}"
      end
      # resource path
      local_var_path = '/api/flow-actions/{action_id}/flow-messages/'.sub('{' + 'action_id' + '}', CGI.escape(action_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'fields[flow-message]'] = @api_client.build_collection_param(opts[:'fields_flow_message'], :csv) if !opts[:'fields_flow_message'].nil?
      query_params[:'filter'] = opts[:'filter'] if !opts[:'filter'].nil?
      query_params[:'sort'] = opts[:'sort'] if !opts[:'sort'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # klaviyo api revision
      header_params['revision'] =  ENV['API_REVISION'] || "2022-09-07.pre"
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Hash<String, Object>'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Klaviyo-API-Key']

      new_options = opts.merge(
        :operation => :"FlowsApi.get_flow_action_messages",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: FlowsApi#get_flow_action_messages\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get Flow Action Relationships
    # Gets a list of relationships for flow messages that belong to the given flow action. The flow message relationships can be sorted by id in ascending and descending order. Each request will return a max of 50 flow message relationships, which can be paginated through offset pagination<br><br>*Rate limits*:<br>Burst: `3/s`<br>Steady: `60/m`
    # @param id [String] 
    # @param related_resource [String] 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :filter For more information please visit https://developers.klaviyo.com/en/v2022-09-07.pre/reference/api-overview#filtering&lt;br&gt;Allowed field(s)/operator(s):&lt;br&gt;&#x60;name&#x60;: &#x60;contains&#x60;, &#x60;ends-with&#x60;, &#x60;equals&#x60;, &#x60;starts-with&#x60;&lt;br&gt;&#x60;created&#x60;: &#x60;equals&#x60;, &#x60;greater-or-equal&#x60;, &#x60;greater-than&#x60;, &#x60;less-or-equal&#x60;, &#x60;less-than&#x60;&lt;br&gt;&#x60;updated&#x60;: &#x60;equals&#x60;, &#x60;greater-or-equal&#x60;, &#x60;greater-than&#x60;, &#x60;less-or-equal&#x60;, &#x60;less-than&#x60;
    # @option opts [String] :sort For more information please visit https://developers.klaviyo.com/en/v2022-09-07.pre/reference/api-overview#sorting
    # @return [Hash<String, Object>]
    def get_flow_action_relationships(id, related_resource, opts = {})
      data, _status_code, _headers = get_flow_action_relationships_with_http_info(id, related_resource, opts)
      data
    end

    # Get Flow Action Relationships
    # Gets a list of relationships for flow messages that belong to the given flow action. The flow message relationships can be sorted by id in ascending and descending order. Each request will return a max of 50 flow message relationships, which can be paginated through offset pagination&lt;br&gt;&lt;br&gt;*Rate limits*:&lt;br&gt;Burst: &#x60;3/s&#x60;&lt;br&gt;Steady: &#x60;60/m&#x60;
    # @param id [String] 
    # @param related_resource [String] 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :filter For more information please visit https://developers.klaviyo.com/en/v2022-09-07.pre/reference/api-overview#filtering&lt;br&gt;Allowed field(s)/operator(s):&lt;br&gt;&#x60;name&#x60;: &#x60;contains&#x60;, &#x60;ends-with&#x60;, &#x60;equals&#x60;, &#x60;starts-with&#x60;&lt;br&gt;&#x60;created&#x60;: &#x60;equals&#x60;, &#x60;greater-or-equal&#x60;, &#x60;greater-than&#x60;, &#x60;less-or-equal&#x60;, &#x60;less-than&#x60;&lt;br&gt;&#x60;updated&#x60;: &#x60;equals&#x60;, &#x60;greater-or-equal&#x60;, &#x60;greater-than&#x60;, &#x60;less-or-equal&#x60;, &#x60;less-than&#x60;
    # @option opts [String] :sort For more information please visit https://developers.klaviyo.com/en/v2022-09-07.pre/reference/api-overview#sorting
    # @return [Array<(Hash<String, Object>, Integer, Hash)>] Hash<String, Object> data, response status code and response headers
    def get_flow_action_relationships_with_http_info(id, related_resource, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: FlowsApi.get_flow_action_relationships ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling FlowsApi.get_flow_action_relationships"
      end
      # verify the required parameter 'related_resource' is set
      if @api_client.config.client_side_validation && related_resource.nil?
        fail ArgumentError, "Missing the required parameter 'related_resource' when calling FlowsApi.get_flow_action_relationships"
      end
      # verify enum value
      allowable_values = ["flow", "flow-messages"]
      if @api_client.config.client_side_validation && !allowable_values.include?(related_resource)
        fail ArgumentError, "invalid value for \"related_resource\", must be one of #{allowable_values}"
      end
      allowable_values = ["created", "-created", "id", "-id", "name", "-name", "updated", "-updated"]
      if @api_client.config.client_side_validation && opts[:'sort'] && !allowable_values.include?(opts[:'sort'])
        fail ArgumentError, "invalid value for \"sort\", must be one of #{allowable_values}"
      end
      # resource path
      local_var_path = '/api/flow-actions/{id}/relationships/{related_resource}/'.sub('{' + 'id' + '}', CGI.escape(id.to_s)).sub('{' + 'related_resource' + '}', CGI.escape(related_resource.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'filter'] = opts[:'filter'] if !opts[:'filter'].nil?
      query_params[:'sort'] = opts[:'sort'] if !opts[:'sort'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # klaviyo api revision
      header_params['revision'] =  ENV['API_REVISION'] || "2022-09-07.pre"
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Hash<String, Object>'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Klaviyo-API-Key']

      new_options = opts.merge(
        :operation => :"FlowsApi.get_flow_action_relationships",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: FlowsApi#get_flow_action_relationships\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get Flow Flow Actions
    # Gets a list of flow actions that belong to the given flow. Sparse fieldsets can be utilized to request specific fields. The flow actions can be sorted by id, action_type, status, created, and updated in ascending and descending order. Each request will return a max of 50 flow actions, which can be paginated through offset pagination<br><br>*Rate limits*:<br>Burst: `3/s`<br>Steady: `60/m`
    # @param flow_id [String] 
    # @param [Hash] opts the optional parameters
    # @option opts [Array<String>] :fields_flow_action For more information please visit https://developers.klaviyo.com/en/v2022-09-07.pre/reference/api-overview#filtering
    # @option opts [String] :filter For more information please visit https://developers.klaviyo.com/en/v2022-09-07.pre/reference/api-overview#filtering&lt;br&gt;Allowed field(s)/operator(s):&lt;br&gt;&#x60;id&#x60;: &#x60;any&#x60;&lt;br&gt;&#x60;action_type&#x60;: &#x60;any&#x60;, &#x60;equals&#x60;&lt;br&gt;&#x60;status&#x60;: &#x60;equals&#x60;&lt;br&gt;&#x60;created&#x60;: &#x60;equals&#x60;, &#x60;greater-or-equal&#x60;, &#x60;greater-than&#x60;, &#x60;less-or-equal&#x60;, &#x60;less-than&#x60;&lt;br&gt;&#x60;updated&#x60;: &#x60;equals&#x60;, &#x60;greater-or-equal&#x60;, &#x60;greater-than&#x60;, &#x60;less-or-equal&#x60;, &#x60;less-than&#x60;
    # @option opts [String] :sort For more information please visit https://developers.klaviyo.com/en/v2022-09-07.pre/reference/api-overview#sorting
    # @return [Hash<String, Object>]
    def get_flow_flow_actions(flow_id, opts = {})
      data, _status_code, _headers = get_flow_flow_actions_with_http_info(flow_id, opts)
      data
    end

    # Get Flow Flow Actions
    # Gets a list of flow actions that belong to the given flow. Sparse fieldsets can be utilized to request specific fields. The flow actions can be sorted by id, action_type, status, created, and updated in ascending and descending order. Each request will return a max of 50 flow actions, which can be paginated through offset pagination&lt;br&gt;&lt;br&gt;*Rate limits*:&lt;br&gt;Burst: &#x60;3/s&#x60;&lt;br&gt;Steady: &#x60;60/m&#x60;
    # @param flow_id [String] 
    # @param [Hash] opts the optional parameters
    # @option opts [Array<String>] :fields_flow_action For more information please visit https://developers.klaviyo.com/en/v2022-09-07.pre/reference/api-overview#filtering
    # @option opts [String] :filter For more information please visit https://developers.klaviyo.com/en/v2022-09-07.pre/reference/api-overview#filtering&lt;br&gt;Allowed field(s)/operator(s):&lt;br&gt;&#x60;id&#x60;: &#x60;any&#x60;&lt;br&gt;&#x60;action_type&#x60;: &#x60;any&#x60;, &#x60;equals&#x60;&lt;br&gt;&#x60;status&#x60;: &#x60;equals&#x60;&lt;br&gt;&#x60;created&#x60;: &#x60;equals&#x60;, &#x60;greater-or-equal&#x60;, &#x60;greater-than&#x60;, &#x60;less-or-equal&#x60;, &#x60;less-than&#x60;&lt;br&gt;&#x60;updated&#x60;: &#x60;equals&#x60;, &#x60;greater-or-equal&#x60;, &#x60;greater-than&#x60;, &#x60;less-or-equal&#x60;, &#x60;less-than&#x60;
    # @option opts [String] :sort For more information please visit https://developers.klaviyo.com/en/v2022-09-07.pre/reference/api-overview#sorting
    # @return [Array<(Hash<String, Object>, Integer, Hash)>] Hash<String, Object> data, response status code and response headers
    def get_flow_flow_actions_with_http_info(flow_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: FlowsApi.get_flow_flow_actions ...'
      end
      # verify the required parameter 'flow_id' is set
      if @api_client.config.client_side_validation && flow_id.nil?
        fail ArgumentError, "Missing the required parameter 'flow_id' when calling FlowsApi.get_flow_flow_actions"
      end
      allowable_values = ["action_type", "status", "created", "updated", "settings", "tracking_options", "send_options", "send_options.use_smart_sending", "send_options.is_transactional", "render_options", "render_options.shorten_links", "render_options.add_org_prefix", "render_options.add_info_link", "render_options.add_opt_out_language"]
      if @api_client.config.client_side_validation && opts[:'fields_flow_action'] && !opts[:'fields_flow_action'].all? { |item| allowable_values.include?(item) }
        fail ArgumentError, "invalid value for \"fields_flow_action\", must include one of #{allowable_values}"
      end
      allowable_values = ["created", "-created", "id", "-id", "status", "-status", "updated", "-updated"]
      if @api_client.config.client_side_validation && opts[:'sort'] && !allowable_values.include?(opts[:'sort'])
        fail ArgumentError, "invalid value for \"sort\", must be one of #{allowable_values}"
      end
      # resource path
      local_var_path = '/api/flows/{flow_id}/flow-actions/'.sub('{' + 'flow_id' + '}', CGI.escape(flow_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'fields[flow-action]'] = @api_client.build_collection_param(opts[:'fields_flow_action'], :csv) if !opts[:'fields_flow_action'].nil?
      query_params[:'filter'] = opts[:'filter'] if !opts[:'filter'].nil?
      query_params[:'sort'] = opts[:'sort'] if !opts[:'sort'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # klaviyo api revision
      header_params['revision'] =  ENV['API_REVISION'] || "2022-09-07.pre"
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Hash<String, Object>'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Klaviyo-API-Key']

      new_options = opts.merge(
        :operation => :"FlowsApi.get_flow_flow_actions",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: FlowsApi#get_flow_flow_actions\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get Flow Message
    # Get a flow message by id<br><br>*Rate limits*:<br>Burst: `3/s`<br>Steady: `60/m`
    # @param id [String] 
    # @param [Hash] opts the optional parameters
    # @option opts [Array<String>] :fields_flow_action For more information please visit https://developers.klaviyo.com/en/v2022-09-07.pre/reference/api-overview#filtering
    # @option opts [Array<String>] :fields_flow_message For more information please visit https://developers.klaviyo.com/en/v2022-09-07.pre/reference/api-overview#filtering
    # @option opts [Array<String>] :include For more information please visit https://developers.klaviyo.com/en/v2022-09-07.pre/reference/api-overview#relationships
    # @return [Hash<String, Object>]
    def get_flow_message(id, opts = {})
      data, _status_code, _headers = get_flow_message_with_http_info(id, opts)
      data
    end

    # Get Flow Message
    # Get a flow message by id&lt;br&gt;&lt;br&gt;*Rate limits*:&lt;br&gt;Burst: &#x60;3/s&#x60;&lt;br&gt;Steady: &#x60;60/m&#x60;
    # @param id [String] 
    # @param [Hash] opts the optional parameters
    # @option opts [Array<String>] :fields_flow_action For more information please visit https://developers.klaviyo.com/en/v2022-09-07.pre/reference/api-overview#filtering
    # @option opts [Array<String>] :fields_flow_message For more information please visit https://developers.klaviyo.com/en/v2022-09-07.pre/reference/api-overview#filtering
    # @option opts [Array<String>] :include For more information please visit https://developers.klaviyo.com/en/v2022-09-07.pre/reference/api-overview#relationships
    # @return [Array<(Hash<String, Object>, Integer, Hash)>] Hash<String, Object> data, response status code and response headers
    def get_flow_message_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: FlowsApi.get_flow_message ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling FlowsApi.get_flow_message"
      end
      allowable_values = ["action_type", "status", "created", "updated", "settings", "tracking_options", "send_options", "send_options.use_smart_sending", "send_options.is_transactional", "render_options", "render_options.shorten_links", "render_options.add_org_prefix", "render_options.add_info_link", "render_options.add_opt_out_language"]
      if @api_client.config.client_side_validation && opts[:'fields_flow_action'] && !opts[:'fields_flow_action'].all? { |item| allowable_values.include?(item) }
        fail ArgumentError, "invalid value for \"fields_flow_action\", must include one of #{allowable_values}"
      end
      allowable_values = ["name", "channel", "content", "created", "updated"]
      if @api_client.config.client_side_validation && opts[:'fields_flow_message'] && !opts[:'fields_flow_message'].all? { |item| allowable_values.include?(item) }
        fail ArgumentError, "invalid value for \"fields_flow_message\", must include one of #{allowable_values}"
      end
      allowable_values = ["flow-action"]
      if @api_client.config.client_side_validation && opts[:'include'] && !opts[:'include'].all? { |item| allowable_values.include?(item) }
        fail ArgumentError, "invalid value for \"include\", must include one of #{allowable_values}"
      end
      # resource path
      local_var_path = '/api/flow-messages/{id}/'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'fields[flow-action]'] = @api_client.build_collection_param(opts[:'fields_flow_action'], :csv) if !opts[:'fields_flow_action'].nil?
      query_params[:'fields[flow-message]'] = @api_client.build_collection_param(opts[:'fields_flow_message'], :csv) if !opts[:'fields_flow_message'].nil?
      query_params[:'include'] = @api_client.build_collection_param(opts[:'include'], :csv) if !opts[:'include'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # klaviyo api revision
      header_params['revision'] =  ENV['API_REVISION'] || "2022-09-07.pre"
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Hash<String, Object>'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Klaviyo-API-Key']

      new_options = opts.merge(
        :operation => :"FlowsApi.get_flow_message",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: FlowsApi#get_flow_message\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get Flow Message Action
    # Get the flow action for a flow message<br><br>*Rate limits*:<br>Burst: `3/s`<br>Steady: `60/m`
    # @param message_id [String] 
    # @param [Hash] opts the optional parameters
    # @option opts [Array<String>] :fields_flow_action For more information please visit https://developers.klaviyo.com/en/v2022-09-07.pre/reference/api-overview#filtering
    # @return [Hash<String, Object>]
    def get_flow_message_action(message_id, opts = {})
      data, _status_code, _headers = get_flow_message_action_with_http_info(message_id, opts)
      data
    end

    # Get Flow Message Action
    # Get the flow action for a flow message&lt;br&gt;&lt;br&gt;*Rate limits*:&lt;br&gt;Burst: &#x60;3/s&#x60;&lt;br&gt;Steady: &#x60;60/m&#x60;
    # @param message_id [String] 
    # @param [Hash] opts the optional parameters
    # @option opts [Array<String>] :fields_flow_action For more information please visit https://developers.klaviyo.com/en/v2022-09-07.pre/reference/api-overview#filtering
    # @return [Array<(Hash<String, Object>, Integer, Hash)>] Hash<String, Object> data, response status code and response headers
    def get_flow_message_action_with_http_info(message_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: FlowsApi.get_flow_message_action ...'
      end
      # verify the required parameter 'message_id' is set
      if @api_client.config.client_side_validation && message_id.nil?
        fail ArgumentError, "Missing the required parameter 'message_id' when calling FlowsApi.get_flow_message_action"
      end
      allowable_values = ["action_type", "status", "created", "updated", "settings", "tracking_options", "send_options", "send_options.use_smart_sending", "send_options.is_transactional", "render_options", "render_options.shorten_links", "render_options.add_org_prefix", "render_options.add_info_link", "render_options.add_opt_out_language"]
      if @api_client.config.client_side_validation && opts[:'fields_flow_action'] && !opts[:'fields_flow_action'].all? { |item| allowable_values.include?(item) }
        fail ArgumentError, "invalid value for \"fields_flow_action\", must include one of #{allowable_values}"
      end
      # resource path
      local_var_path = '/api/flow-messages/{message_id}/flow-action/'.sub('{' + 'message_id' + '}', CGI.escape(message_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'fields[flow-action]'] = @api_client.build_collection_param(opts[:'fields_flow_action'], :csv) if !opts[:'fields_flow_action'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # klaviyo api revision
      header_params['revision'] =  ENV['API_REVISION'] || "2022-09-07.pre"
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Hash<String, Object>'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Klaviyo-API-Key']

      new_options = opts.merge(
        :operation => :"FlowsApi.get_flow_message_action",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: FlowsApi#get_flow_message_action\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get Flow Message Relationships
    # Get the relationship for a flow message's flow action<br><br>*Rate limits*:<br>Burst: `3/s`<br>Steady: `60/m`
    # @param id [String] 
    # @param related_resource [String] 
    # @param [Hash] opts the optional parameters
    # @return [Hash<String, Object>]
    def get_flow_message_relationships(id, related_resource, opts = {})
      data, _status_code, _headers = get_flow_message_relationships_with_http_info(id, related_resource, opts)
      data
    end

    # Get Flow Message Relationships
    # Get the relationship for a flow message&#39;s flow action&lt;br&gt;&lt;br&gt;*Rate limits*:&lt;br&gt;Burst: &#x60;3/s&#x60;&lt;br&gt;Steady: &#x60;60/m&#x60;
    # @param id [String] 
    # @param related_resource [String] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Hash<String, Object>, Integer, Hash)>] Hash<String, Object> data, response status code and response headers
    def get_flow_message_relationships_with_http_info(id, related_resource, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: FlowsApi.get_flow_message_relationships ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling FlowsApi.get_flow_message_relationships"
      end
      # verify the required parameter 'related_resource' is set
      if @api_client.config.client_side_validation && related_resource.nil?
        fail ArgumentError, "Missing the required parameter 'related_resource' when calling FlowsApi.get_flow_message_relationships"
      end
      # verify enum value
      allowable_values = ["flow-action"]
      if @api_client.config.client_side_validation && !allowable_values.include?(related_resource)
        fail ArgumentError, "invalid value for \"related_resource\", must be one of #{allowable_values}"
      end
      # resource path
      local_var_path = '/api/flow-messages/{id}/relationships/{related_resource}/'.sub('{' + 'id' + '}', CGI.escape(id.to_s)).sub('{' + 'related_resource' + '}', CGI.escape(related_resource.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # klaviyo api revision
      header_params['revision'] =  ENV['API_REVISION'] || "2022-09-07.pre"
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Hash<String, Object>'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Klaviyo-API-Key']

      new_options = opts.merge(
        :operation => :"FlowsApi.get_flow_message_relationships",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: FlowsApi#get_flow_message_relationships\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get Flow Relationships
    # Gets a list of relationships for flow actions that belong to the given flow. The flow action relationships can be sorted by id in ascending and descending order. Each request will return a max of 50 flow action relationships, which can be paginated through offset pagination<br><br>*Rate limits*:<br>Burst: `3/s`<br>Steady: `60/m`
    # @param id [String] 
    # @param related_resource [String] 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :filter For more information please visit https://developers.klaviyo.com/en/v2022-09-07.pre/reference/api-overview#filtering&lt;br&gt;Allowed field(s)/operator(s):&lt;br&gt;&#x60;action_type&#x60;: &#x60;equals&#x60;&lt;br&gt;&#x60;status&#x60;: &#x60;equals&#x60;&lt;br&gt;&#x60;created&#x60;: &#x60;equals&#x60;, &#x60;greater-or-equal&#x60;, &#x60;greater-than&#x60;, &#x60;less-or-equal&#x60;, &#x60;less-than&#x60;&lt;br&gt;&#x60;updated&#x60;: &#x60;equals&#x60;, &#x60;greater-or-equal&#x60;, &#x60;greater-than&#x60;, &#x60;less-or-equal&#x60;, &#x60;less-than&#x60;
    # @option opts [String] :sort For more information please visit https://developers.klaviyo.com/en/v2022-09-07.pre/reference/api-overview#sorting
    # @return [Hash<String, Object>]
    def get_flow_relationships(id, related_resource, opts = {})
      data, _status_code, _headers = get_flow_relationships_with_http_info(id, related_resource, opts)
      data
    end

    # Get Flow Relationships
    # Gets a list of relationships for flow actions that belong to the given flow. The flow action relationships can be sorted by id in ascending and descending order. Each request will return a max of 50 flow action relationships, which can be paginated through offset pagination&lt;br&gt;&lt;br&gt;*Rate limits*:&lt;br&gt;Burst: &#x60;3/s&#x60;&lt;br&gt;Steady: &#x60;60/m&#x60;
    # @param id [String] 
    # @param related_resource [String] 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :filter For more information please visit https://developers.klaviyo.com/en/v2022-09-07.pre/reference/api-overview#filtering&lt;br&gt;Allowed field(s)/operator(s):&lt;br&gt;&#x60;action_type&#x60;: &#x60;equals&#x60;&lt;br&gt;&#x60;status&#x60;: &#x60;equals&#x60;&lt;br&gt;&#x60;created&#x60;: &#x60;equals&#x60;, &#x60;greater-or-equal&#x60;, &#x60;greater-than&#x60;, &#x60;less-or-equal&#x60;, &#x60;less-than&#x60;&lt;br&gt;&#x60;updated&#x60;: &#x60;equals&#x60;, &#x60;greater-or-equal&#x60;, &#x60;greater-than&#x60;, &#x60;less-or-equal&#x60;, &#x60;less-than&#x60;
    # @option opts [String] :sort For more information please visit https://developers.klaviyo.com/en/v2022-09-07.pre/reference/api-overview#sorting
    # @return [Array<(Hash<String, Object>, Integer, Hash)>] Hash<String, Object> data, response status code and response headers
    def get_flow_relationships_with_http_info(id, related_resource, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: FlowsApi.get_flow_relationships ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling FlowsApi.get_flow_relationships"
      end
      # verify the required parameter 'related_resource' is set
      if @api_client.config.client_side_validation && related_resource.nil?
        fail ArgumentError, "Missing the required parameter 'related_resource' when calling FlowsApi.get_flow_relationships"
      end
      # verify enum value
      allowable_values = ["flow-actions"]
      if @api_client.config.client_side_validation && !allowable_values.include?(related_resource)
        fail ArgumentError, "invalid value for \"related_resource\", must be one of #{allowable_values}"
      end
      allowable_values = ["created", "-created", "id", "-id", "status", "-status", "updated", "-updated"]
      if @api_client.config.client_side_validation && opts[:'sort'] && !allowable_values.include?(opts[:'sort'])
        fail ArgumentError, "invalid value for \"sort\", must be one of #{allowable_values}"
      end
      # resource path
      local_var_path = '/api/flows/{id}/relationships/{related_resource}/'.sub('{' + 'id' + '}', CGI.escape(id.to_s)).sub('{' + 'related_resource' + '}', CGI.escape(related_resource.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'filter'] = opts[:'filter'] if !opts[:'filter'].nil?
      query_params[:'sort'] = opts[:'sort'] if !opts[:'sort'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # klaviyo api revision
      header_params['revision'] =  ENV['API_REVISION'] || "2022-09-07.pre"
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Hash<String, Object>'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Klaviyo-API-Key']

      new_options = opts.merge(
        :operation => :"FlowsApi.get_flow_relationships",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: FlowsApi#get_flow_relationships\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get Flows
    # Gets a list of flows for the company. Sparsefieldsets can be utilized to request specific fields. The flows can be sorted by id, name, status, trigger_type, created, updated in ascending and descending order. Each request will return a max of 50 flows, which can be paginated through offset pagination<br><br>*Rate limits*:<br>Burst: `3/s`<br>Steady: `60/m`
    # @param [Hash] opts the optional parameters
    # @option opts [Array<String>] :fields_flow_action For more information please visit https://developers.klaviyo.com/en/v2022-09-07.pre/reference/api-overview#filtering
    # @option opts [Array<String>] :fields_flow For more information please visit https://developers.klaviyo.com/en/v2022-09-07.pre/reference/api-overview#filtering
    # @option opts [String] :filter For more information please visit https://developers.klaviyo.com/en/v2022-09-07.pre/reference/api-overview#filtering&lt;br&gt;Allowed field(s)/operator(s):&lt;br&gt;&#x60;id&#x60;: &#x60;any&#x60;&lt;br&gt;&#x60;name&#x60;: &#x60;contains&#x60;, &#x60;ends-with&#x60;, &#x60;equals&#x60;, &#x60;starts-with&#x60;&lt;br&gt;&#x60;status&#x60;: &#x60;equals&#x60;&lt;br&gt;&#x60;archived&#x60;: &#x60;equals&#x60;&lt;br&gt;&#x60;created&#x60;: &#x60;equals&#x60;, &#x60;greater-or-equal&#x60;, &#x60;greater-than&#x60;, &#x60;less-or-equal&#x60;, &#x60;less-than&#x60;&lt;br&gt;&#x60;updated&#x60;: &#x60;equals&#x60;, &#x60;greater-or-equal&#x60;, &#x60;greater-than&#x60;, &#x60;less-or-equal&#x60;, &#x60;less-than&#x60;&lt;br&gt;&#x60;trigger_type&#x60;: &#x60;equals&#x60;
    # @option opts [Array<String>] :include For more information please visit https://developers.klaviyo.com/en/v2022-09-07.pre/reference/api-overview#relationships
    # @option opts [String] :sort For more information please visit https://developers.klaviyo.com/en/v2022-09-07.pre/reference/api-overview#sorting
    # @return [Hash<String, Object>]
    def get_flows(opts = {})
      data, _status_code, _headers = get_flows_with_http_info(opts)
      data
    end

    # Get Flows
    # Gets a list of flows for the company. Sparsefieldsets can be utilized to request specific fields. The flows can be sorted by id, name, status, trigger_type, created, updated in ascending and descending order. Each request will return a max of 50 flows, which can be paginated through offset pagination&lt;br&gt;&lt;br&gt;*Rate limits*:&lt;br&gt;Burst: &#x60;3/s&#x60;&lt;br&gt;Steady: &#x60;60/m&#x60;
    # @param [Hash] opts the optional parameters
    # @option opts [Array<String>] :fields_flow_action For more information please visit https://developers.klaviyo.com/en/v2022-09-07.pre/reference/api-overview#filtering
    # @option opts [Array<String>] :fields_flow For more information please visit https://developers.klaviyo.com/en/v2022-09-07.pre/reference/api-overview#filtering
    # @option opts [String] :filter For more information please visit https://developers.klaviyo.com/en/v2022-09-07.pre/reference/api-overview#filtering&lt;br&gt;Allowed field(s)/operator(s):&lt;br&gt;&#x60;id&#x60;: &#x60;any&#x60;&lt;br&gt;&#x60;name&#x60;: &#x60;contains&#x60;, &#x60;ends-with&#x60;, &#x60;equals&#x60;, &#x60;starts-with&#x60;&lt;br&gt;&#x60;status&#x60;: &#x60;equals&#x60;&lt;br&gt;&#x60;archived&#x60;: &#x60;equals&#x60;&lt;br&gt;&#x60;created&#x60;: &#x60;equals&#x60;, &#x60;greater-or-equal&#x60;, &#x60;greater-than&#x60;, &#x60;less-or-equal&#x60;, &#x60;less-than&#x60;&lt;br&gt;&#x60;updated&#x60;: &#x60;equals&#x60;, &#x60;greater-or-equal&#x60;, &#x60;greater-than&#x60;, &#x60;less-or-equal&#x60;, &#x60;less-than&#x60;&lt;br&gt;&#x60;trigger_type&#x60;: &#x60;equals&#x60;
    # @option opts [Array<String>] :include For more information please visit https://developers.klaviyo.com/en/v2022-09-07.pre/reference/api-overview#relationships
    # @option opts [String] :sort For more information please visit https://developers.klaviyo.com/en/v2022-09-07.pre/reference/api-overview#sorting
    # @return [Array<(Hash<String, Object>, Integer, Hash)>] Hash<String, Object> data, response status code and response headers
    def get_flows_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: FlowsApi.get_flows ...'
      end
      allowable_values = ["action_type", "status", "created", "updated", "settings", "tracking_options", "send_options", "send_options.use_smart_sending", "send_options.is_transactional", "render_options", "render_options.shorten_links", "render_options.add_org_prefix", "render_options.add_info_link", "render_options.add_opt_out_language"]
      if @api_client.config.client_side_validation && opts[:'fields_flow_action'] && !opts[:'fields_flow_action'].all? { |item| allowable_values.include?(item) }
        fail ArgumentError, "invalid value for \"fields_flow_action\", must include one of #{allowable_values}"
      end
      allowable_values = ["name", "status", "archived", "created", "updated", "trigger_type"]
      if @api_client.config.client_side_validation && opts[:'fields_flow'] && !opts[:'fields_flow'].all? { |item| allowable_values.include?(item) }
        fail ArgumentError, "invalid value for \"fields_flow\", must include one of #{allowable_values}"
      end
      allowable_values = ["flow-actions"]
      if @api_client.config.client_side_validation && opts[:'include'] && !opts[:'include'].all? { |item| allowable_values.include?(item) }
        fail ArgumentError, "invalid value for \"include\", must include one of #{allowable_values}"
      end
      allowable_values = ["created", "-created", "id", "-id", "name", "-name", "status", "-status", "trigger_type", "-trigger_type", "updated", "-updated"]
      if @api_client.config.client_side_validation && opts[:'sort'] && !allowable_values.include?(opts[:'sort'])
        fail ArgumentError, "invalid value for \"sort\", must be one of #{allowable_values}"
      end
      # resource path
      local_var_path = '/api/flows/'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'fields[flow-action]'] = @api_client.build_collection_param(opts[:'fields_flow_action'], :csv) if !opts[:'fields_flow_action'].nil?
      query_params[:'fields[flow]'] = @api_client.build_collection_param(opts[:'fields_flow'], :csv) if !opts[:'fields_flow'].nil?
      query_params[:'filter'] = opts[:'filter'] if !opts[:'filter'].nil?
      query_params[:'include'] = @api_client.build_collection_param(opts[:'include'], :csv) if !opts[:'include'].nil?
      query_params[:'sort'] = opts[:'sort'] if !opts[:'sort'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # klaviyo api revision
      header_params['revision'] =  ENV['API_REVISION'] || "2022-09-07.pre"
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Hash<String, Object>'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Klaviyo-API-Key']

      new_options = opts.merge(
        :operation => :"FlowsApi.get_flows",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: FlowsApi#get_flows\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update Flow
    # Update the status of a flow. As a side-effect, update the status of all actions belonging to that flow.<br><br>*Rate limits*:<br>Burst: `3/s`<br>Steady: `60/m`
    # @param id [String] 
    # @param flow_update_query [FlowUpdateQuery] 
    # @param [Hash] opts the optional parameters
    # @return [Hash<String, Object>]
    def update_flow(id, flow_update_query, opts = {})
      data, _status_code, _headers = update_flow_with_http_info(id, flow_update_query, opts)
      data
    end

    # Update Flow
    # Update the status of a flow. As a side-effect, update the status of all actions belonging to that flow.&lt;br&gt;&lt;br&gt;*Rate limits*:&lt;br&gt;Burst: &#x60;3/s&#x60;&lt;br&gt;Steady: &#x60;60/m&#x60;
    # @param id [String] 
    # @param flow_update_query [FlowUpdateQuery] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Hash<String, Object>, Integer, Hash)>] Hash<String, Object> data, response status code and response headers
    def update_flow_with_http_info(id, flow_update_query, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: FlowsApi.update_flow ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling FlowsApi.update_flow"
      end
      # verify the required parameter 'flow_update_query' is set
      if @api_client.config.client_side_validation && flow_update_query.nil?
        fail ArgumentError, "Missing the required parameter 'flow_update_query' when calling FlowsApi.update_flow"
      end
      # resource path
      local_var_path = '/api/flows/{id}/'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # klaviyo api revision
      header_params['revision'] =  ENV['API_REVISION'] || "2022-09-07.pre"
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(flow_update_query)

      # return_type
      return_type = opts[:debug_return_type] || 'Hash<String, Object>'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Klaviyo-API-Key']

      new_options = opts.merge(
        :operation => :"FlowsApi.update_flow",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: FlowsApi#update_flow\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
