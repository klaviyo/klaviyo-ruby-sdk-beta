=begin
#Klaviyo API (Beta)

#The Klaviyo REST API. Please visit https://developers.klaviyo.com for more details.

The version of the OpenAPI document: 2022-09-07.pre
Contact: developers@klaviyo.com
Generated by: https://openapi-generator.tech
OpenAPI Generator version: 5.4.0

=end

require 'cgi'

module KlaviyoBeta
  class MetricsApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Get Metric
    # Get a specific Metric by id<br><br>*Rate limits*:<br>Burst: `10/s`<br>Steady: `150/m`
    # @param id [String] 
    # @param [Hash] opts the optional parameters
    # @option opts [Array<String>] :fields_metric For more information please visit https://developers.klaviyo.com/en/v2022-09-07.pre/reference/api-overview#filtering
    # @return [Hash<String, Object>]
    def get_metric(id, opts = {})
      data, _status_code, _headers = get_metric_with_http_info(id, opts)
      data
    end

    # Get Metric
    # Get a specific Metric by id&lt;br&gt;&lt;br&gt;*Rate limits*:&lt;br&gt;Burst: &#x60;10/s&#x60;&lt;br&gt;Steady: &#x60;150/m&#x60;
    # @param id [String] 
    # @param [Hash] opts the optional parameters
    # @option opts [Array<String>] :fields_metric For more information please visit https://developers.klaviyo.com/en/v2022-09-07.pre/reference/api-overview#filtering
    # @return [Array<(Hash<String, Object>, Integer, Hash)>] Hash<String, Object> data, response status code and response headers
    def get_metric_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MetricsApi.get_metric ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling MetricsApi.get_metric"
      end
      allowable_values = ["name", "created", "updated", "integration"]
      if @api_client.config.client_side_validation && opts[:'fields_metric'] && !opts[:'fields_metric'].all? { |item| allowable_values.include?(item) }
        fail ArgumentError, "invalid value for \"fields_metric\", must include one of #{allowable_values}"
      end
      # resource path
      local_var_path = '/api/metrics/{id}/'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'fields[metric]'] = @api_client.build_collection_param(opts[:'fields_metric'], :csv) if !opts[:'fields_metric'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # klaviyo api revision
      header_params['revision'] =  ENV['API_REVISION'] || "2022-09-07.pre"
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Hash<String, Object>'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Klaviyo-API-Key']

      new_options = opts.merge(
        :operation => :"MetricsApi.get_metric",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MetricsApi#get_metric\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get Metric Aggregate
    # Query & aggregate event data associated with specific metrics, optionally filtering & grouping results by time, event or profile dimensions. </br> This endpoint lets you form queries in your `POST` request body rather than query parameters for simpler query syntax. </br> </br> Request body parameters (all nested under `attributes`): * `return_fields`: Provide fields to limit the returned data * `sort`: Provide a sort key (e.g. `\"-timestamp\"`) * `page_cursor`: Optional pagination cursor to iterate over large result sets * `measurement`: Measurement key, e.g `\"sum\"`, `\"sum_value\"`, `\"count\"` * `interval`: Aggregation interval, e.g. `\"hour\"`,`\"day\"`,`\"week\"`,`\"month\"` * `limit`: Limit the number of returned results * `by`: Optional attribute(s) used for grouping by the aggregation function * `metric_id`: The metric ID used in the aggregation * `filters`: List of filters, must include time range using ISO 8601 format (`\"YYYY-MM-DDTHH:MM:SS.mmmmmm\"`) * `timezone`: The timezone used for processing the query </br> </br> For a comprehensive list of native Klaviyo metrics and their associated attributes for grouping & filtering, please refer to our [Native Klaviyo Metrics & Attributes](https://developers.klaviyo.com/en/reference/klaviyo-metrics-attributes) guide for our V1 APIs.<br><br>*Rate limits*:<br>Burst: `3/s`<br>Steady: `60/m`
    # @param metric_aggregate_query [MetricAggregateQuery] Retrieve Metric Aggregations
    # @param [Hash] opts the optional parameters
    # @return [Hash<String, Object>]
    def get_metric_aggregate(metric_aggregate_query, opts = {})
      data, _status_code, _headers = get_metric_aggregate_with_http_info(metric_aggregate_query, opts)
      data
    end

    # Get Metric Aggregate
    # Query &amp; aggregate event data associated with specific metrics, optionally filtering &amp; grouping results by time, event or profile dimensions. &lt;/br&gt; This endpoint lets you form queries in your &#x60;POST&#x60; request body rather than query parameters for simpler query syntax. &lt;/br&gt; &lt;/br&gt; Request body parameters (all nested under &#x60;attributes&#x60;): * &#x60;return_fields&#x60;: Provide fields to limit the returned data * &#x60;sort&#x60;: Provide a sort key (e.g. &#x60;\&quot;-timestamp\&quot;&#x60;) * &#x60;page_cursor&#x60;: Optional pagination cursor to iterate over large result sets * &#x60;measurement&#x60;: Measurement key, e.g &#x60;\&quot;sum\&quot;&#x60;, &#x60;\&quot;sum_value\&quot;&#x60;, &#x60;\&quot;count\&quot;&#x60; * &#x60;interval&#x60;: Aggregation interval, e.g. &#x60;\&quot;hour\&quot;&#x60;,&#x60;\&quot;day\&quot;&#x60;,&#x60;\&quot;week\&quot;&#x60;,&#x60;\&quot;month\&quot;&#x60; * &#x60;limit&#x60;: Limit the number of returned results * &#x60;by&#x60;: Optional attribute(s) used for grouping by the aggregation function * &#x60;metric_id&#x60;: The metric ID used in the aggregation * &#x60;filters&#x60;: List of filters, must include time range using ISO 8601 format (&#x60;\&quot;YYYY-MM-DDTHH:MM:SS.mmmmmm\&quot;&#x60;) * &#x60;timezone&#x60;: The timezone used for processing the query &lt;/br&gt; &lt;/br&gt; For a comprehensive list of native Klaviyo metrics and their associated attributes for grouping &amp; filtering, please refer to our [Native Klaviyo Metrics &amp; Attributes](https://developers.klaviyo.com/en/reference/klaviyo-metrics-attributes) guide for our V1 APIs.&lt;br&gt;&lt;br&gt;*Rate limits*:&lt;br&gt;Burst: &#x60;3/s&#x60;&lt;br&gt;Steady: &#x60;60/m&#x60;
    # @param metric_aggregate_query [MetricAggregateQuery] Retrieve Metric Aggregations
    # @param [Hash] opts the optional parameters
    # @return [Array<(Hash<String, Object>, Integer, Hash)>] Hash<String, Object> data, response status code and response headers
    def get_metric_aggregate_with_http_info(metric_aggregate_query, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MetricsApi.get_metric_aggregate ...'
      end
      # verify the required parameter 'metric_aggregate_query' is set
      if @api_client.config.client_side_validation && metric_aggregate_query.nil?
        fail ArgumentError, "Missing the required parameter 'metric_aggregate_query' when calling MetricsApi.get_metric_aggregate"
      end
      # resource path
      local_var_path = '/api/metric-aggregates/'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # klaviyo api revision
      header_params['revision'] =  ENV['API_REVISION'] || "2022-09-07.pre"
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(metric_aggregate_query)

      # return_type
      return_type = opts[:debug_return_type] || 'Hash<String, Object>'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Klaviyo-API-Key']

      new_options = opts.merge(
        :operation => :"MetricsApi.get_metric_aggregate",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MetricsApi#get_metric_aggregate\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get Metrics
    # Returns a list of all Metric objects in an account, that can optionally be filtered by integration name and/or category.<br><br>*Rate limits*:<br>Burst: `10/s`<br>Steady: `150/m`
    # @param [Hash] opts the optional parameters
    # @option opts [Array<String>] :fields_metric For more information please visit https://developers.klaviyo.com/en/v2022-09-07.pre/reference/api-overview#filtering
    # @option opts [String] :page_cursor For more information please visit https://developers.klaviyo.com/en/v2022-09-07.pre/reference/api-overview#pagination
    # @return [Hash<String, Object>]
    def get_metrics(opts = {})
      data, _status_code, _headers = get_metrics_with_http_info(opts)
      data
    end

    # Get Metrics
    # Returns a list of all Metric objects in an account, that can optionally be filtered by integration name and/or category.&lt;br&gt;&lt;br&gt;*Rate limits*:&lt;br&gt;Burst: &#x60;10/s&#x60;&lt;br&gt;Steady: &#x60;150/m&#x60;
    # @param [Hash] opts the optional parameters
    # @option opts [Array<String>] :fields_metric For more information please visit https://developers.klaviyo.com/en/v2022-09-07.pre/reference/api-overview#filtering
    # @option opts [String] :page_cursor For more information please visit https://developers.klaviyo.com/en/v2022-09-07.pre/reference/api-overview#pagination
    # @return [Array<(Hash<String, Object>, Integer, Hash)>] Hash<String, Object> data, response status code and response headers
    def get_metrics_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MetricsApi.get_metrics ...'
      end
      allowable_values = ["name", "created", "updated", "integration"]
      if @api_client.config.client_side_validation && opts[:'fields_metric'] && !opts[:'fields_metric'].all? { |item| allowable_values.include?(item) }
        fail ArgumentError, "invalid value for \"fields_metric\", must include one of #{allowable_values}"
      end
      # resource path
      local_var_path = '/api/metrics/'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'fields[metric]'] = @api_client.build_collection_param(opts[:'fields_metric'], :csv) if !opts[:'fields_metric'].nil?
      query_params[:'page[cursor]'] = opts[:'page_cursor'] if !opts[:'page_cursor'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # klaviyo api revision
      header_params['revision'] =  ENV['API_REVISION'] || "2022-09-07.pre"
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Hash<String, Object>'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Klaviyo-API-Key']

      new_options = opts.merge(
        :operation => :"MetricsApi.get_metrics",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MetricsApi#get_metrics\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
